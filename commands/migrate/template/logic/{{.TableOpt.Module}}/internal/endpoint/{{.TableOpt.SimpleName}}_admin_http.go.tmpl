package endpoint
{{$ObjName := GonicCase .Table.Name}}
{{$VarObjName := FirstLower $ObjName}}
{{$SimpleName := .TableOpt.SimpleName}}
{{$HandlerName := print $SimpleName "AdminHandler"}}
import (
	"github.com/fengjx/daox"
    "github.com/fengjx/luchen"

	"{{.Gomod}}/connom/types"
	"{{.Gomod}}/logic/{{.TableOpt.Module}}/internal/data/entity"
	"{{.Gomod}}/transport/http"
)

type {{$HandlerName}} struct {
}

func (h {{$HandlerName}}) Bind(router *luchen.HTTPServeMux) {
	router.Sub(http.AdminAPI+"/{{.TableOpt.Module}}/{{.TableOpt.SimpleName}}", func(sub *luchen.HTTPServeMux) {
		sub.Handle("/add", h.add())
		sub.Handle("/update", h.update())
		sub.Handle("/del", h.del())
		sub.Handle("/batch-update", h.batchUpdate())
		sub.Handle("/query", h.query())
	})
}

func (h {{$HandlerName}}) query() *luchen.HTTPTransportServer {
	return http.NewHandler(
		{{.TableOpt.SimpleName}}Admin.makeQueryEndpoint(),
		luchen.DecodeHTTPJSONRequest[daox.QueryRecord],
		luchen.EncodeHTTPJSONResponse(http.ResponseWrapper),
	)
}

func (h {{$HandlerName}}) add() *luchen.HTTPTransportServer {
	return http.NewHandler(
		{{.TableOpt.SimpleName}}Admin.makeAddEndpoint(),
		luchen.DecodeHTTPJSONRequest[entity.{{$ObjName}}],
		luchen.EncodeHTTPJSONResponse(http.ResponseWrapper),
	)
}

func (h {{$HandlerName}}) update() *luchen.HTTPTransportServer {
	return http.NewHandler(
		{{.TableOpt.SimpleName}}Admin.makeUpdateEndpoint(),
		luchen.DecodeHTTPJSONRequest[entity.{{$ObjName}}],
		luchen.EncodeHTTPJSONResponse(http.ResponseWrapper),
	)
}

func (h {{$HandlerName}}) del() *luchen.HTTPTransportServer {
	return http.NewHandler(
		{{.TableOpt.SimpleName}}Admin.makeDelEndpoint(),
		luchen.DecodeHTTPJSONRequest[types.DelReq],
		luchen.EncodeHTTPJSONResponse(http.ResponseWrapper),
	)
}

func (h {{$HandlerName}}) batchUpdate() *luchen.HTTPTransportServer {
	return http.NewHandler(
		{{.TableOpt.SimpleName}}Admin.makeBatchUpdateEndpoint(),
		luchen.DecodeHTTPJSONRequest[types.BatchUpdate],
		luchen.EncodeHTTPJSONResponse(http.ResponseWrapper),
	)
}
