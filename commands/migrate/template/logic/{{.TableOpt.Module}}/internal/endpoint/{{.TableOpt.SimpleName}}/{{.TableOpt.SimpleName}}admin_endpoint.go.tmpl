package {{.TableOpt.SimpleName}}
{{$ObjName := GonicCase .Table.Name}}
{{$SimpleGonicCase := GonicCase .TableOpt.SimpleName}}
{{$SimpleFirstLower := FirstLower $SimpleGonicCase}}
{{$ServiceVarName := print $SimpleGonicCase "BaseSvc"}}
{{$EndpointName := print $SimpleFirstLower "AdminEndpoint"}}
{{$EndpointVarName := print $SimpleFirstLower "Admin"}}

import (
	"context"
	"reflect"
	"strconv"

	"github.com/fengjx/daox"
	"github.com/fengjx/go-halo/errs"
	"github.com/fengjx/go-halo/utils"
	"github.com/fengjx/luchen"

	"{{.Gomod}}/common/types"
	"{{.Gomod}}/logic/{{.TableOpt.Module}}/internal/data/entity"
	"{{.Gomod}}/logic/{{.TableOpt.Module}}/internal/service"
)

// Register{{$SimpleGonicCase}}AdminHTTPHandler 注册 HTTP 路由
func Register{{$SimpleGonicCase}}AdminHTTPHandler(hs *luchen.HTTPServer) {
	e := &{{$EndpointName}}{}
	hs.Handle(&luchen.EndpointDefine{
		Name:     "{{$SimpleGonicCase}}Admin.Add",
		Path:     "/admin/{{.TableOpt.Module}}/{{.TableOpt.SimpleName}}/add",
		ReqType:  reflect.TypeOf(&entity.{{$ObjName}}{}),
		RspType:  reflect.TypeOf(&types.AddRsp{}),
		Endpoint: e.makeAddEndpoint(),
	})

	hs.Handle(&luchen.EndpointDefine{
		Name:     "{{$SimpleGonicCase}}Admin.Update",
		Path:     "/admin/{{.TableOpt.Module}}/{{.TableOpt.SimpleName}}/update",
		ReqType:  reflect.TypeOf(&entity.{{$ObjName}}{}),
		RspType:  reflect.TypeOf(&types.OKRsp{}),
		Endpoint: e.makeUpdateEndpoint(),
	})

	hs.Handle(&luchen.EndpointDefine{
		Name:     "{{$SimpleGonicCase}}Admin.Del",
		Path:     "/admin/{{.TableOpt.Module}}/{{.TableOpt.SimpleName}}/del",
		ReqType:  reflect.TypeOf(&types.DelReq{}),
		RspType:  reflect.TypeOf(&types.OKRsp{}),
		Endpoint: e.makeDelEndpoint(),
	})

	hs.Handle(&luchen.EndpointDefine{
		Name:     "{{$SimpleGonicCase}}Admin.BatchUpdate",
		Path:     "/admin/{{.TableOpt.Module}}/{{.TableOpt.SimpleName}}/batch-update",
		ReqType:  reflect.TypeOf(&types.BatchUpdate{}),
		RspType:  reflect.TypeOf(&types.OKRsp{}),
		Endpoint: e.makeBatchUpdateEndpoint(),
	})

	hs.Handle(&luchen.EndpointDefine{
		Name:     "{{$SimpleGonicCase}}Admin.Query",
		Path:     "/admin/{{.TableOpt.Module}}/{{.TableOpt.SimpleName}}/query",
		ReqType:  reflect.TypeOf(&daox.QueryRecord{}),
		RspType:  reflect.TypeOf(&types.AmisResp{}),
		Endpoint: e.makeQueryEndpoint(),
	})
}

type {{$EndpointName}} struct {
}

func (e *{{$EndpointName}}) makeAddEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		param := request.(*entity.{{$ObjName}})
		id, err := service.{{$ServiceVarName}}.Add(ctx, param)
		if err != nil {
			return nil, errs.Wrap(err, "add {{.Table.Name}} err")
		}
		response = types.AddRsp{
			ID: id,
		}
		return
	}
}

func (e *{{$EndpointName}}) makeUpdateEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		param := request.(*entity.{{$ObjName}})
		ok, err := service.{{$ServiceVarName}}.Update(ctx, param)
		if err != nil {
			return nil, errs.Wrap(err, "update {{.Table.Name}} err")
		}
		response = types.OKRsp{
			Success: ok,
		}
		return
	}
}

func (e *{{$EndpointName}}) makeDelEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		param := request.(*types.DelReq)
		res := types.OKRsp{Success: true}
		if param.IDs == "" {
			return res, nil
		}
		ids := utils.SplitToSlice[int64](param.IDs, ",", func(item string) int64 {
			i, _ := strconv.ParseInt(item, 10, 64)
			return i
		})
		err = service.{{$ServiceVarName}}.DeleteByIDs(ctx, ids)
		if err != nil {
			return nil, errs.Wrap(err, "delete {{.Table.Name}} err")
		}
		return res, nil
	}
}

func (e *{{$EndpointName}}) makeBatchUpdateEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		param := request.(*types.BatchUpdate)
		ok, err := service.{{$ServiceVarName}}.BatchUpdate(ctx, param)
		if err != nil {
			return nil, errs.Wrap(err, "batch update {{.Table.Name}} err")
		}
		response = types.OKRsp{
			Success: ok,
		}
		return
	}
}

func (e *{{$EndpointName}}) makeQueryEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		query := request.(*daox.QueryRecord)
		pageVO, err := service.{{$ServiceVarName}}.Query(ctx, query)
		if err != nil {
			return nil, errs.Wrap(err, "page query {{.Table.Name}} err")
		}
		return pageVO.ToAmisResp(), nil
	}
}
