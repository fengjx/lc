package endpoint
{{$ObjName := GonicCase .Table.Name}}
{{$VarObjName := FirstLower $ObjName}}
{{$SimpleName := .TableOpt.SimpleName}}
{{$EndpointName := print $SimpleName "AdminEndpoint"}}
import (
	"context"
    "strconv"

    "github.com/fengjx/daox"
    "github.com/fengjx/go-halo/utils"
    "github.com/fengjx/luchen"
    "github.com/fengjx/luchen/log"
    "go.uber.org/zap"

	"{{.Gomod}}/connom/types"
	"{{.Gomod}}/logic/{{.TableOpt.Module}}/internal/data/entity"
	"{{.Gomod}}/logic/{{.TableOpt.Module}}/internal/service"
)

var {{.TableOpt.SimpleName}}Admin = {{$EndpointName}}{}

type {{$EndpointName}} struct {
}

func (e {{$EndpointName}}) makeAddEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		log := luchen.Logger(ctx)
		param := request.(*entity.{{$ObjName}})
		id, err := service.{{$ObjName}}BaseSvc.Add(ctx, param)
		if err != nil {
			log.Error("add {{.Table.Name}} err", zap.Any("param", param), zap.Error(err))
			return nil, err
		}
		response = types.AddRsp{
			ID: id,
		}
		return
	}
}

func (e {{$EndpointName}}) makeUpdateEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		log := luchen.Logger(ctx)
		param := request.(*entity.{{$ObjName}})
		ok, err := service.{{$ObjName}}BaseSvc.Update(ctx, param)
		if err != nil {
			log.Error("update {{.Table.Name}} err", zap.Any("param", param), zap.Error(err))
			return nil, err
		}
		response = types.OKRsp{
			Success: ok,
		}
		return
	}
}

func (e {{$EndpointName}}) makeDelEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		param := request.(*types.DelReq)
		res := types.OKRsp{Success: true}
		if param.IDs == "" {
			return res, nil
		}
		ids := utils.SplitToSlice[int64](param.IDs, ",", func(item string) int64 {
			i, _ := strconv.ParseInt(item, 10, 64)
			return i
		})
		err = service.{{$ObjName}}BaseSvc.DeleteByIDs(ctx, ids)
		if err != nil {
			return nil, err
		}
		return
	}
}

func (e {{$EndpointName}}) makeBatchUpdateEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		log := luchen.Logger(ctx)
		param := request.(*types.BatchUpdate)
		ok, err := service.{{$ObjName}}BaseSvc.BatchUpdate(ctx, param)
		if err != nil {
			log.Error("batch update {{.Table.Name}} err", zap.Any("param", param), zap.Error(err))
			return nil, err
		}
		response = types.OKRsp{
			Success: ok,
		}
		return
	}
}

func (e {{$EndpointName}}) makeQueryEndpoint() luchen.Endpoint {
	return func(ctx context.Context, request interface{}) (response interface{}, err error) {
		log := luchen.Logger(ctx)
		query := request.(*daox.QueryRecord)
		pageVO, err := service.{{$ObjName}}BaseSvc.Query(ctx, query)
		if err != nil {
			log.Error("page query {{.Table.Name}} err", zap.Error(err))
			return nil, err
		}
		return pageVO.ToAmisResp(), nil
	}
}
