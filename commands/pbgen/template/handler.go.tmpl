// Code generated by lc pbgen. DO NOT EDIT.
package {{ .PkgName }}

import (
	"context"

	grpctransport "github.com/go-kit/kit/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	"reflect"
	"sync"

	"github.com/fengjx/luchen"
)

// New{{ .ServiceName }}Service 返回一个 {{ .ServiceName }}Client
func New{{ .ServiceName }}Service(serverName string) {{ .ServiceName }}Client {
	cli := luchen.GetGRPCClient(
		serverName,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	return New{{ .ServiceName }}Client(cli)
}

// {{ .ServiceName }}Handler 定义服务处理器接口
type {{ .ServiceName }}Handler interface {
	{{ range .Methods }}
	{{ .Name }}(ctx context.Context, in *{{ .InputType }}) (*{{ .OutputType }}, error)
	{{- end }}
}

// {{ .ServiceName }}Endpoint 定义服务 Endpoint 接口
type {{ .ServiceName }}Endpoint interface {
	{{ range .Methods }}
	{{ .Name }}Endpoint() luchen.Endpoint
	{{- end }}
}

// {{ .ServiceName }}ServiceImpl 服务实现
type {{ .ServiceName }}ServiceImpl struct {
	Unimplemented{{ .ServiceName }}Server
	middlewares []luchen.Middleware
	endpoint    {{ .ServiceName }}Endpoint
	{{- range .Methods }}
	{{ .FieldName }}Define *luchen.EndpointDefine
	{{ .FieldName }} grpctransport.Handler
	{{- end }}
}

var (
	{{ lower .ServiceName }}ServiceImplOnce = sync.Once{}
	{{ lower .ServiceName }}ServiceImpl     *{{ .ServiceName }}ServiceImpl
)

// Get{{ .ServiceName }}ServiceImpl 获取服务实现的单例
func Get{{ .ServiceName }}ServiceImpl(e {{ .ServiceName }}Endpoint, middlewares ...luchen.Middleware) *{{ .ServiceName }}ServiceImpl {
	{{ lower .ServiceName }}ServiceImplOnce.Do(func() {
		{{ lower .ServiceName }}ServiceImpl = new{{ .ServiceName }}ServiceImpl(e, middlewares...)
	})
	return {{ lower .ServiceName }}ServiceImpl
}

// new{{ .ServiceName }}ServiceImpl 创建新的服务实现
func new{{ .ServiceName }}ServiceImpl(e {{ .ServiceName }}Endpoint, middlewares ...luchen.Middleware) *{{ .ServiceName }}ServiceImpl {
	{{- range .Methods }}
	{{ .FieldName }}Define := &luchen.EndpointDefine{
		Name:        "{{ $.ServiceName }}.{{ .Name }}",
		Path:        "{{ if .HTTPPath }}{{ .HTTPPath }}{{ else }}/{{ kebab .Name }}{{ end }}",
		ReqType:     reflect.TypeOf(&{{ .InputType }}{}),
		RspType:     reflect.TypeOf(&{{ .OutputType }}{}),
		Endpoint:    e.{{ .Name }}Endpoint(),
		Middlewares: middlewares,
	}
	{{- end }}
	impl := &{{ .ServiceName }}ServiceImpl{
		endpoint:    e,
		{{- range .Methods }}
		{{ .FieldName }}Define: {{ .FieldName }}Define,
		{{- end }}
	}
	{{- range .Methods }}
	impl.{{ .FieldName }} = luchen.NewGRPCTransportServer({{ .FieldName }}Define)
	{{- end }}
	return impl
}

{{ range .Methods }}

{{- if .Comment }}
{{- range $line := split .Comment "\n" }}
// {{ $line }}
{{- end }}
{{- else }}
// {{ .Name }} 实现 {{ $.ServiceName }}Server 接口中的 {{ .Name }} 方法
{{- end }}
func (s *{{ $.ServiceName }}ServiceImpl) {{ .Name }}(ctx context.Context, req *{{ .InputType }}) (*{{ .OutputType }}, error) {
	_, resp, err := s.{{ .FieldName }}.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*{{ .OutputType }}), nil
}
{{ end }}

// Register{{ .ServiceName }}GRPCHandler 注册 GRPC 接口实现
func Register{{ .ServiceName }}GRPCHandler(gs *luchen.GRPCServer, e {{ .ServiceName }}Endpoint, middlewares ...luchen.Middleware) {
	impl := Get{{ .ServiceName }}ServiceImpl(e, middlewares...)
	Register{{ .ServiceName }}Server(gs, impl)
}

// Register{{ .ServiceName }}HTTPHandler 注册 HTTP 请求路由
func Register{{ .ServiceName }}HTTPHandler(hs *luchen.HTTPServer, e {{ .ServiceName }}Endpoint, middlewares ...luchen.Middleware) {
	impl := Get{{ .ServiceName }}ServiceImpl(e, middlewares...)
	{{- range .Methods }}
	if impl.{{ .FieldName }}Define.Path != "" {
		hs.Mux().Handle(impl.{{ .FieldName }}Define.Path, luchen.NewHTTPTransportServer(impl.{{ .FieldName }}Define))
	}
	{{- end }}
} 